name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      checks: write
      statuses: write
      packages: read
      deployments: write
      repository-projects: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref || github.ref }}
      
      - name: Configure Git
        run: |
          git config --global user.name "Claude Code"
          git config --global user.email "claude@anthropic.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
      
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # EXPLICIT: Listing all specific bash commands and tools without wildcards
          allowed_tools: |
            Bash(ls -la)
            Bash(ls -l)
            Bash(ls -a)
            Bash(ls -lah)
            Bash(ls -R)
            Bash(ls .)
            Bash(ls ..)
            Bash(ls *)
            Bash(ls -la *)
            Bash(pwd)
            Bash(whoami)
            Bash(echo)
            Bash(echo *)
            Bash(echo "test")
            Bash(echo test)
            Bash(cat)
            Bash(cat *)
            Bash(cat *.*)
            Bash(cat *.md)
            Bash(cat *.txt)
            Bash(cat *.json)
            Bash(cat *.yml)
            Bash(cat *.yaml)
            Bash(cat *.js)
            Bash(cat *.ts)
            Bash(cat *.py)
            Bash(cat *.sh)
            Bash(cat README.md)
            Bash(cat package.json)
            Bash(cat .gitignore)
            Bash(head)
            Bash(head *)
            Bash(head -n 10)
            Bash(head -n 20)
            Bash(tail)
            Bash(tail *)
            Bash(tail -n 10)
            Bash(tail -n 20)
            Bash(tail -f)
            Bash(grep)
            Bash(grep *)
            Bash(grep -r)
            Bash(grep -i)
            Bash(grep -n)
            Bash(grep -v)
            Bash(grep -l)
            Bash(grep -c)
            Bash(find)
            Bash(find .)
            Bash(find ..)
            Bash(find . -name)
            Bash(find . -name "*.md")
            Bash(find . -name "*.txt")
            Bash(find . -name "*.json")
            Bash(find . -name "*.js")
            Bash(find . -name "*.py")
            Bash(find . -type f)
            Bash(find . -type d)
            Bash(find . -maxdepth 1)
            Bash(find . -maxdepth 2)
            Bash(curl)
            Bash(curl --version)
            Bash(curl -v)
            Bash(curl -s)
            Bash(curl -L)
            Bash(curl -o)
            Bash(curl -O)
            Bash(curl -X GET)
            Bash(curl -X POST)
            Bash(curl -H)
            Bash(curl --header)
            Bash(wget)
            Bash(wget --version)
            Bash(wget -O)
            Bash(wget -q)
            Bash(wget -c)
            Bash(cd)
            Bash(cd .)
            Bash(cd ..)
            Bash(cd /)
            Bash(cd ~)
            Bash(cd /home)
            Bash(cd /tmp)
            Bash(cd /var)
            Bash(mkdir)
            Bash(mkdir -p)
            Bash(rmdir)
            Bash(rm)
            Bash(rm -f)
            Bash(rm -r)
            Bash(rm -rf)
            Bash(mv)
            Bash(cp)
            Bash(cp -r)
            Bash(cp -a)
            Bash(touch)
            Bash(chmod)
            Bash(chmod +x)
            Bash(chmod 755)
            Bash(chmod 644)
            Bash(chown)
            Bash(head)
            Bash(tail)
            Bash(grep)
            Bash(find)
            Bash(curl)
            Bash(wget)
            Bash(awk)
            Bash(sed)
            Bash(sort)
            Bash(uniq)
            Bash(wc)
            Bash(cut)
            Bash(tr)
            Bash(xargs)
            Bash(which)
            Bash(whereis)
            Bash(file)
            Bash(stat)
            Bash(du)
            Bash(df)
            Bash(ps)
            Bash(top)
            Bash(kill)
            Bash(killall)
            Bash(chmod)
            Bash(chown)
            Bash(mkdir)
            Bash(rmdir)
            Bash(rm)
            Bash(mv)
            Bash(cp)
            Bash(ln)
            Bash(touch)
            Bash(tar)
            Bash(gzip)
            Bash(gunzip)
            Bash(zip)
            Bash(unzip)
            Bash(ssh)
            Bash(scp)
            Bash(rsync)
            Bash(ping)
            Bash(nslookup)
            Bash(dig)
            Bash(netstat)
            Bash(ss)
            Bash(ifconfig)
            Bash(ip)
            Bash(route)
            Bash(iptables)
            Bash(systemctl)
            Bash(service)
            Bash(crontab)
            Bash(mount)
            Bash(umount)
            Bash(fdisk)
            Bash(lsblk)
            Bash(blkid)
            Bash(free)
            Bash(uname)
            Bash(uptime)
            Bash(date)
            Bash(cal)
            Bash(history)
            Bash(alias)
            Bash(export)
            Bash(env)
            Bash(printenv)
            Bash(set)
            Bash(unset)
            Bash(source)
            Bash(.)
            Bash(eval)
            Bash(exec)
            Bash(nohup)
            Bash(screen)
            Bash(tmux)
            Bash(jobs)
            Bash(bg)
            Bash(fg)
            Bash(disown)
            Bash(wait)
            Bash(sleep)
            Bash(timeout)
            Bash(watch)
            Bash(yes)
            Bash(seq)
            Bash(shuf)
            Bash(factor)
            Bash(bc)
            Bash(dc)
            Bash(expr)
            Bash(test)
            Bash([)
            Bash(true)
            Bash(false)
            Bash(read)
            Bash(printf)
            Bash(tee)
            Bash(less)
            Bash(more)
            Bash(nano)
            Bash(vim)
            Bash(emacs)
            Bash(vi)
            Git(init)
            Git(clone)
            Git(add)
            Git(commit)
            Git(push)
            Git(pull)
            Git(fetch)
            Git(merge)
            Git(rebase)
            Git(checkout)
            Git(switch)
            Git(branch)
            Git(tag)
            Git(status)
            Git(log)
            Git(show)
            Git(diff)
            Git(blame)
            Git(annotate)
            Git(grep)
            Git(bisect)
            Git(reset)
            Git(revert)
            Git(clean)
            Git(stash)
            Git(remote)
            Git(submodule)
            Git(config)
            Git(help)
            Git(version)
            Git(archive)
            Git(bundle)
            Git(cherry-pick)
            Git(citool)
            Git(gui)
            Git(gitk)
            Git(format-patch)
            Git(send-email)
            Git(apply)
            Git(am)
            Git(request-pull)
            Git(svn)
            Git(fast-import)
            Git(fast-export)
            Git(relink)
            Git(filter-branch)
            Git(lost-found)
            Git(daemon)
            Git(update-server-info)
            Git(pack-refs)
            Git(prune)
            Git(prune-packed)
            Git(repack)
            Git(pack-objects)
            Git(unpack-objects)
            Git(verify-pack)
            Git(verify-tag)
            Git(cat-file)
            Git(commit-tree)
            Git(hash-object)
            Git(merge-base)
            Git(name-rev)
            Git(pack-redundant)
            Git(patch-id)
            Git(rev-list)
            Git(rev-parse)
            Git(show-index)
            Git(show-ref)
            Git(symbolic-ref)
            Git(unpack-file)
            Git(var)
            Git(whatchanged)
            Git(ls-files)
            Git(ls-tree)
            Git(ls-remote)
            Git(show-branch)
            Git(merge-tree)
            Git(rerere)
            Git(rev-tree)
            Git(shortlog)
            Git(describe)
            Git(reflog)
            Git(instaweb)
            Git(archive)
            Git(bundle)
            Git(fsck)
            Git(gc)
            Git(maintenance)
            Git(notes)
            Git(worktree)
            FileSystem(readFile)
            FileSystem(writeFile)
            FileSystem(appendFile)
            FileSystem(readdir)
            FileSystem(mkdir)
            FileSystem(rmdir)
            FileSystem(rm)
            FileSystem(stat)
            FileSystem(exists)
            FileSystem(copy)
            FileSystem(move)
            FileSystem(rename)
            FileSystem(chmod)
            FileSystem(chown)
            FileSystem(link)
            FileSystem(symlink)
            FileSystem(readlink)
            FileSystem(realpath)
            FileSystem(glob)
            FileSystem(watch)
            FileSystem(unwatch)
            Write(file)
            Write(append)
            Write(create)
            Write(overwrite)
            Write(binary)
            Write(text)
            Write(json)
            Write(yaml)
            Write(xml)
            Write(csv)
            Write(markdown)
            Write(html)
            Write(css)
            Write(javascript)
            Write(typescript)
            Write(python)
            Write(bash)
            Write(shell)
            Write(config)
            Write(log)
            Read(file)
            Read(text)
            Read(binary)
            Read(json)
            Read(yaml)
            Read(xml)
            Read(csv)
            Read(markdown)
            Read(html)
            Read(css)
            Read(javascript)
            Read(typescript)
            Read(python)
            Read(bash)
            Read(shell)
            Read(config)
            Read(log)
            Read(directory)
            Read(recursive)
            Edit(file)
            Edit(text)
            Edit(insert)
            Edit(replace)
            Edit(delete)
            Edit(append)
            Edit(prepend)
            Edit(search)
            Edit(searchReplace)
            Edit(lineEdit)
            Edit(blockEdit)
            Edit(multiEdit)
            MultiEdit(files)
            MultiEdit(search)
            MultiEdit(replace)
            MultiEdit(insert)
            MultiEdit(delete)
            MultiEdit(batch)
            MultiEdit(pattern)
            MultiEdit(regex)
            MultiEdit(global)
            Glob(pattern)
            Glob(recursive)
            Glob(files)
            Glob(directories)
            Glob(hidden)
            Glob(ignore)
            Glob(include)
            Glob(exclude)
            Glob(case)
            Glob(absolute)
            Glob(relative)
            Grep(search)
            Grep(pattern)
            Grep(regex)
            Grep(file)
            Grep(directory)
            Grep(recursive)
            Grep(case)
            Grep(word)
            Grep(line)
            Grep(count)
            Grep(context)
            Grep(before)
            Grep(after)
            Grep(invert)
            Grep(binary)
            Grep(exclude)
            Grep(include)
            LS(directory)
            LS(recursive)
            LS(all)
            LS(long)
            LS(human)
            LS(time)
            LS(size)
            LS(sort)
            LS(reverse)
            LS(classify)
            LS(color)
            LS(format)
            LS(group)
            LS(owner)
            LS(permissions)
            LS(hidden)
            LS(directories)
            LS(files)
          
          custom_instructions: |
            # CLAUDE CODE ACCESS CONFIGURATION
            
            ## 🟢 AVAILABLE BASH COMMANDS (Confirmed Working):
            **Basic Operations:**
            - `ls -la`, `ls -l`, `ls -a`, `ls -R` - Directory listing (✅ WORKS)
            - `pwd`, `whoami`, `echo` - Basic info commands (✅ WORKS)
            - `cat`, `head`, `tail` - File reading commands (✅ WORKS)
            - `cd` - Directory navigation (✅ WORKS)
            
            **System Monitoring:**
            - `ps aux`, `df -h`, `free -h`, `uname -a`, `uptime`, `date` (✅ WORKS)
            - `which`, `whereis`, `env`, `printenv` (✅ WORKS)
            
            **Text Processing (Available but may require permission):**
            - `awk`, `sed`, `sort`, `uniq`, `wc`, `cut`, `tr` (✅ Listed in config)
            
            ## ⚠️ SECURITY-GATED COMMANDS (Use Alternatives):
            **File Operations - USE SPECIALIZED TOOLS INSTEAD:**
            - ❌ `mkdir` → Use **FileSystem(mkdir)** or **Write tool**
            - ❌ `echo >` (redirection) → Use **Write tool** to create files
            - ❌ `cp`, `mv` → Use **FileSystem(copy)**, **FileSystem(move)**
            - ❌ `chmod` → Use **FileSystem(chmod)**
            - ❌ `rm` → Use **FileSystem(rm)** (be very careful!)
            
            **Search Operations - USE SPECIALIZED TOOLS:**
            - ❌ `grep` command → Use **Grep tool** (works perfectly!)
            - ❌ `find` command → Use **Glob tool** (works perfectly!)
            
            **Package Management - RESTRICTED:**
            - ❌ `bun --version`, `npm --version` → Use other methods to check versions
            - ❌ Package installations blocked in Actions environment
            
            ## 🔧 PREFERRED TOOLS (Always Work):
            **Instead of bash commands, use these specialized tools:**
            1. **LS tool** - Better than `ls`, shows complete directory structure
            2. **Read tool** - Better than `cat`, handles all file types
            3. **Write tool** - Better than `echo >`, creates/edits files safely
            4. **Grep tool** - Better than `grep`, powerful search capabilities
            5. **Glob tool** - Better than `find`, pattern matching and file discovery
            6. **FileSystem tools** - All file operations (mkdir, copy, move, etc.)
            7. **Git tools** - All git operations work perfectly
            
            ## 📋 WORKFLOW STRATEGY:
            1. **Start with specialized tools** - They always work and are more reliable
            2. **Use bash commands for system info** - `ps`, `df`, `uname`, etc.
            3. **Avoid restricted operations** - Don't try `mkdir`, `grep`, `find` via bash
            4. **Dynamic permissions** - Some commands work initially then become restricted
            5. **Git operations** - Full access via Git tools
            
            ## 🎯 DEVELOPMENT WORKFLOW:
            **For file operations:**
            - List files: Use **LS tool** or `ls -la`
            - Read files: Use **Read tool** or `cat filename`
            - Create files: Use **Write tool** (never `echo >`)
            - Search content: Use **Grep tool** (never `grep`)
            - Find files: Use **Glob tool** (never `find`)
            
            **For git operations:**
            - Use Git tools for all repository operations
            - `git status`, `git add`, `git commit`, `git push` all work via Git tools
            
            **For system monitoring:**
            - `ps aux`, `df -h`, `free -h` work perfectly via bash
            - Use these for debugging and system status
            
            ## ⚡ IMPORTANT NOTES:
            - **Session-based restrictions**: Commands may work initially then become restricted
            - **Security by design**: File operations are intentionally limited to specialized tools
            - **Always prefer specialized tools** over bash commands when available
            - **Test with simple commands first** before attempting complex operations
            - **Git authentication is pre-configured** with GitHub token
            
            ## 🔒 ENVIRONMENT CONTEXT:
            - **Location**: GitHub Actions runner environment
            - **User**: `runner` (not repository owner)
            - **Working directory**: Usually in `/home/runner/work/` or action directory
            - **Git config**: Claude Code <claude@anthropic.com>
            - **Permissions**: Read/write to repository, create branches, push changes
            
            Remember: Your specialized tools (LS, Read, Write, Grep, Glob, FileSystem, Git) provide 
            complete functionality and are more reliable than bash equivalents!

            WORKFLOW:
            1. Always test bash access first with simple commands
            2. Use git commands to explore repository structure
            3. Make changes as requested
            4. Commit and push changes to remote branch
            5. Provide clear status updates
            
            IMPORTANT: You are expected to:
            - Execute bash commands to complete tasks
            - Use git operations freely
            - Create, modify, and delete files as needed
            - Always push your changes to the remote repository
            
          claude_env: |
            NODE_ENV=development
            GIT_AUTHOR_NAME=Claude Code
            GIT_AUTHOR_EMAIL=claude@anthropic.com
            GIT_COMMITTER_NAME=Claude Code
            GIT_COMMITTER_EMAIL=claude@anthropic.com
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
            SHELL=/bin/bash
            TERM=xterm-256color
            CLAUDE_UNRESTRICTED_MODE=true
            GITHUB_ACTIONS_ALLOW_BASH=true
            CI_ALLOW_SHELL_ACCESS=true
            RUNNER_ALLOW_ALL_COMMANDS=true
